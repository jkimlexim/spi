/**
 * Binary Anvil, Inc.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Binary Anvil, Inc. Software Agreement
 * that is bundled with this package in the file LICENSE_BAS.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.binaryanvil.com/software/license/
 *
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@binaryanvil.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this software to
 * newer versions in the future. If you wish to customize this software for
 * your needs please refer to http://www.binaryanvil.com/software for more
 * information.
 *
 * @category    BinaryAnvil
 * @package     Infinity
 * @copyright   Copyright (c) 2018-2019 Binary Anvil,Inc. (http://www.binaryanvil.com)
 * @license     http://www.binaryanvil.com/software/license
 */

//
//  Responsive
//  _____________________________________________

//
//  Media variables, that can be used for splitting styles into several files
//  ---------------------------------------------

@media-common: true; // Sets whether to output common styles (true|false)
@media-target: 'all'; // Sets target device for styles output (all|desktop|mobile)

//
//  Media width mixin used to group styles output based on media queries
//  ---------------------------------------------

.media-width(@extremum, @break) when (@extremum = 'max') and (@break = @screen__s) {
}

//
//  Style groups for 'mobile' devices
//  ---------------------------------------------

& when (@media-target = 'mobile'), (@media-target = 'all') {

    @media only screen and (max-width: (@screen__xxs - 1)) {
        .media-width('max', @screen__xxs);
    }

    @media only screen and (max-width: (@screen__xs - 1)) {
        .media-width('max', @screen__xs);
    }

    @media only screen and (max-width: (@screen__s - 1)) {
        .media-width('max', @screen__s);
    }

    @media only screen and (max-width: (@screen__m - 1)) {
        .media-width('max', @screen__m);
    }

    @media only screen and (max-width: @screen__m) {
        .media-width('max', (@screen__m + 1));
    }

    @media all and (min-width: @screen__s) {
        .media-width('min', @screen__s);
    }

}

//
//  Style groups for 'desktop' devices
//  ---------------------------------------------

& when (@media-target = 'desktop'), (@media-target = 'all') {

    @media all and (min-width: @screen__m),
    print {
        .media-width('min', @screen__m);
    }

    @media all and (min-width: (@screen__m + 1)),
    print {
        .media-width('min', (@screen__m + 1));
    }

    @media all and (min-width: @screen__l),
    print {
        .media-width('min', @screen__l);
    }

    @media only screen and (max-width: (@screen__l - 1)) {
        .media-width('max', @screen__l);
    }

    @media only screen and (min-width: (@screen__l - 1)) {
        .media-width('min', @screen__l);
    }

    @media only screen and (min-width: (@screen__992)) {
        .media-width('min', @screen__992);
    }

    @media only screen and (min-width: (@screen__1200 - 1)) {
        .media-width('min', @screen__1200);
    }

    @media only screen and (max-width: (@screen__xl - 1)) {
        .media-width('max', @screen__xl);
    }

    @media only screen and (min-width: (@screen__xl - 1)) {
        .media-width('min', @screen__xl);
    }

    @media only screen and (min-width: (@screen__1568 - 1)) {
        .media-width('min', @screen__1568);
    }
    @media only screen and (max-width: (@screen__1568 - 1)) {
        .media-width('max', @screen__1568);
    }
    @media only screen and (min-width: (@screen__1377 - 1)) {
        .media-width('min', @screen__1377);
    }
    @media only screen and (max-width: (@screen__1377 - 1)) {
        .media-width('max', @screen__1377);
    }

    @media all and (min-width: @screen__xl),
    print {
        .media-width('min', @screen__xl);
    }
}

//
//  Custom style groups for 'mobile' devices. Use 'view_max' instead of 'max' to override default M2 mobile breakpoints
//  ---------------------------------------------

& when (@media-target = 'mobile'), (@media-target = 'all') {

    // 1200px below
    @media only screen and (max-width: (@screen__1200 - 1)) {
        .media-width('view_max', @screen__1200);
    }

    // 1024px below
    @media only screen and (max-width: (@screen__l - 1)) {
        .media-width('view_max', @screen__l);
    }

    // 992px below
    @media only screen and (max-width: (@screen__992 - 1)) {
        .media-width('view_max', @screen__992);
    }

    // 768px below
    @media only screen and (max-width: (@screen__m - 1)) {
        .media-width('view_max', @screen__m);
    }

    // 640px below
    @media only screen and (max-width: (@screen__s - 1)) {
        .media-width('view_max', @screen__s);
    }

    // 480px below
    @media only screen and (max-width: (@screen__xs - 1)) {
        .media-width('view_max', @screen__xs);
    }

    @media only screen and (max-width: (@screen__xxs)) {
        .media-width('view_max', @screen__xxs);
    }
}
